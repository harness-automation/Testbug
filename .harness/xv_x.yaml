template:
  name: genesis-cd-deploy
  type: Stage
  spec:
    type: Deployment
    spec:
      deploymentType: CustomDeployment
      customDeploymentRef:
        templateRef: account.Genesis_Application
        versionLabel: v1
      service:
        serviceRef: <+input>
        serviceInputs: <+input>
      execution:
        steps:
          - step:
              name: Fetch Instances
              identifier: fetchInstances
              type: FetchInstanceScript
              timeout: 10m
              spec: {}
          - step:
              type: ShellScript
              name: validate-inputs
              identifier: validateinputs
              spec:
                shell: Bash
                executionTarget: {}
                source:
                  type: Inline
                  spec:
                    script: |
                      # Validate input variables

                      if [ -z "$MANIFEST_ID" ]; then
                        echo "Error: MANIFEST_ID variable is not set."
                        exit 1
                      fi
                environmentVariables:
                  - name: MANIFEST_ID
                    type: String
                    value: <+artifact.tag>
                outputVariables: []
              timeout: 10m
              failureStrategies:
                - onFailure:
                    errors:
                      - AllErrors
                    action:
                      type: Abort
        rollbackSteps:
          - stepGroup:
              name: rollback-deploy
              identifier: rollbackdeploy
              steps:
                - step:
                    type: Run
                    name: rollback-deploy
                    identifier: rollbackdeploy
                    spec:
                      connectorRef: account.pypldockerhub
                      image: alpine
                      shell: Sh
                      command: |-
                        #!/bin/sh

                        set -euo pipefail

                        # Install dependencies
                        apk add --no-cache jq curl

                        # Validate input variables
                        JOB_ID="${JOB_ID?Error: JOB_ID variable is not set.}"
                        HRZ_TOKEN="${HRZ_TOKEN?Error: HRZ_TOKEN variable is not set.}"

                        curl_output=$(curl -s "https://engineering.paypalcorp.com/genesis/api/genesis/api/v2/tenant/paypal/job/$JOB_ID/cancel" \
                          -H "Token: $HRZ_TOKEN" \
                          -H 'Provider: pingid' \
                          --data-raw 'null')

                        # Validate curl output
                        if [ -z "$curl_output" ]; then
                          echo "Error: curl returned empty JSON output"
                          exit 1
                        fi

                        # Validate JSON
                        if ! echo "$curl_output" | jq -e . > /dev/null 2>&1; then
                          echo "Error: Invalid JSON response from curl. API response was: $curl_output"
                          exit 1
                        fi

                        # Check for API error code
                        if echo "$curl_output" | jq -e 'has("code")' > /dev/null 2>&1; then
                          curl_code=$(echo "$curl_output" | jq -r '.code')
                          echo "The 'code' field exists. Its value is: $curl_code"
                          if [[ -n "$curl_code" ]] && [[ "$curl_code" -lt 200 || "$curl_code" -ge 300 ]]; then
                            curl_message=$(echo "$curl_output" | jq -r '.message')
                            echo "Error: HTTP $curl_code: $curl_message. Full response was: $curl_output"
                            exit 1
                          fi
                        fi

                        # Extract job ID only if the 'id' field exists and no curl error code was found.
                        if echo "$curl_output" | jq -e 'has("id")' > /dev/null 2>&1; then
                            CANCEL_JOB_ID=$(echo "$curl_output" | jq -r '.id')
                        fi

                        # Validate job ID
                        if [ -z "$CANCEL_JOB_ID" ]; then
                          echo "Error: Invalid JSON response. API response was: $curl_output"
                          exit 1
                        fi

                        echo "Job ID: $CANCEL_JOB_ID"
                        export CANCEL_JOB_ID
                      envVariables:
                        HRZ_TOKEN: <+stage.spec.execution.steps.deployjob.steps.getssohrztoken.output.outputVariables.SSO_HRZ_TOKEN>
                        JOB_ID: <+execution.steps.deployjob.steps.polljob.spec.envVariables.JOB_ID>
                      outputVariables:
                        - name: CANCEL_JOB_ID
                          type: String
                          value: CANCEL_JOB_ID
                - step:
                    type: Run
                    name: poll-rollback-job
                    identifier: pollrollbackjob
                    spec:
                      connectorRef: account.pypldockerhub
                      image: alpine
                      shell: Sh
                      command: |-
                        #!/bin/sh

                        set -euo pipefail

                        # Install dependencies
                        apk add --no-cache jq curl

                        # Validate input variables
                        JOB_ID="${JOB_ID?Error: JOB_ID variable is not set.}"
                        HRZ_TOKEN="${HRZ_TOKEN?Error: HRZ_TOKEN variable is not set.}"

                        retry=true

                        while [[ "$retry" == true ]]; do
                          sleep 20

                          JOB_INFO=$(curl -s "https://engineering.paypalcorp.com/genesis/api/genesis/api/v2/tenant/paypal/job/$JOB_ID?trace=true" \
                            -H 'Accept: */*' \
                            -H "Token: $HRZ_TOKEN" \
                            -H 'Provider: pingid')

                          # Validate curl output
                          if [ -z "$JOB_INFO" ]; then
                            echo "Error: curl returned empty JSON output"
                            exit 1
                          fi

                          # Validate JSON
                          if ! echo "$JOB_INFO" | jq -e . > /dev/null 2>&1; then
                            echo "Error: Invalid JSON response from curl. Full response was: $JOB_INFO"
                            exit 1
                          fi

                          # Extract STATUS
                          STATUS=$(echo "$JOB_INFO" | jq -r '.status')
                          if [[ "$STATUS" == "null" ]]; then
                            echo "Error: 'status' field not found in JSON response. Response was: $JOB_INFO"
                            exit 1
                          fi

                          # Extract REQUEST_PROGRESS
                          REQUEST_PROGRESS=$(echo "$JOB_INFO" | jq -r '.requestProgress | last.msg')
                          if [[ "$REQUEST_PROGRESS" == "null" ]]; then
                            echo "Warning: 'requestProgress' field not found in JSON response. Response was: $JOB_INFO"
                            REQUEST_PROGRESS="" # Set to empty string for consistent handling
                          fi

                          echo "Current Status: $STATUS"
                          if [[ -n "$REQUEST_PROGRESS" ]]; then
                            echo "Current JOB MESSAGE: $REQUEST_PROGRESS"
                          fi

                          case "$STATUS" in
                            "JOB_STATUS_SUCCESS")
                              retry=false
                              ;;
                            "JOB_STATUS_CANCEL_ROLLBACK_SUCCESS")
                              retry=false
                              echo "Job Cancelled"
                              ;;
                            "JOB_STATUS_USER_CANCELED")
                              retry=false
                              echo "Job Cancelled By User"
                              ;;
                            "JOB_STATUS_FAILED")
                              retry=false
                              echo "Job Failed"
                              exit 1
                              ;;
                          esac
                        done
                      envVariables:
                        JOB_ID: <+stage.spec.execution.steps.deployjob.steps.schedulejob.output.outputVariables.JOB_ID>
                        HRZ_TOKEN: <+stage.spec.execution.steps.deployjob.steps.getssohrztoken.output.outputVariables.SSO_HRZ_TOKEN>
              stepGroupInfra:
                type: KubernetesDirect
                spec:
                  connectorRef: account.toolsprimaryk8s
                  namespace: prod
                  harnessImageConnectorRef: account.pypldockerhub
      environment:
        environmentRef: <+input>
        deployToAll: false
        environmentInputs: <+input>
        serviceOverrideInputs: <+input>
        infrastructureDefinitions: <+input>
    failureStrategies:
      - onFailure:
          errors:
            - AllErrors
          action:
            type: StageRollback
    variables:
      - name: deploy_strategy
        type: String
        description: ""
        required: true
        value: <+input>.default(<+pipeline.variables.deploy_strategy>)
      - name: activation_strategy
        type: String
        description: ""
        required: true
        value: <+input>.default(<+pipeline.variables.activation_strategy>)
      - name: approval_user_group
        type: String
        description: ""
        required: false
        value: <+pipeline.variables.approval_user_group>
    when:
      pipelineStatus: Success
  description: ""
  identifier: genesiscddeploy
  versionLabel: v1
